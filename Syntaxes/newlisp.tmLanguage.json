{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "newLISP",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#rawstrings"
		},
		{
			"include": "#longstrings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "entity.name.function.newlisp",
				"match": "(?:^|[() ])(\\+|\\*|!=|@|\\||\\^|~|:|\\$0|\\$1|\\$10|\\$11|\\$12|\\$13|\\$14|\\$15|\\$2|\\$3|\\$4|\\$5|\\$6|\\$7|\\$8|\\$9|<|<=|>|>=|=|\\$args|\\$count|\\$idx|\\$it|\\$main-args|\\$x|abort|abs|acos|acosh|add|address|amb|and|append|append-file|apply|args|array|array-list|array\\?|asin|asinh|assoc|atan|atan2|atanh|atom\\?|base64-dec|base64-enc|bayes-query|bayes-train|begin|beta|betai|bigint|bigint\\?|binomial|bits|callback|case|catch|ceil|change-dir|char|chop|clean|close|collect|command-event|cond|cons|context|context\\?|copy|copy-file|corr|cos|cosh|count|crc32|crit-chi2|crit-f|crit-t|crit-z|current-line|curry|date|date-list|date-parse|date-value|debug|def-new|default|delete-file|delete-url|destroy|det|device|difference|directory|directory\\?|div|do-until|do-while|doargs|dolist|dostring|dotimes|dotree|dump|dup|empty\\?|encrypt|ends-with|env|erf|error-event|eval|eval-string|even\\?|exec|exists|exit|exp|expand|explode|factor|fft|file-info|file\\?|filter|find|find-all|first|flat|float|float\\?|floor|flt|for|for-all|fork|format|fv|gammai|gammaln|gcd|get-url|global|global\\?|history|if|if-not|ifft|index|inf\\?|int|integer|integer\\?|intersect|invert|irr|join|json-error|json-parse|kmeans-query|kmeans-train|lambda\\?|last|last-error|legal\\?|length|let|letex|letn|list|list\\?|load|local|log|lookup|lower-case|macro\\?|main-args|make-dir|map|mat|match|max|member|min|mod|module|mul|multiply|net-accept|net-close|net-connect|net-error|net-eval|net-interface|net-ipv|net-listen|net-local|net-lookup|net-packet|net-peek|net-peer|net-ping|net-receive-from|net-receive-udp|net-select|net-send|net-send-to|net-send-udp|net-service|net-sessions|new|nil\\?|normal|not|now|nper|npv|nth|null\\?|number\\?|odd\\?|open|or|ostype|pack|parse|parse-date|peek|pipe|pmt|post-url|pow|prefix|pretty-print|primitive\\?|print|println|prob-chi2|prob-f|prob-t|prob-z|process|prompt-event|protected\\?|put-url|pv|quote|quote\\?|rand|random|randomize|read-buffer|read-char|read-expr|read-file|read-key|read-line|read-utf8|reader-event|real-path|ref|ref-all|regex|regex-comp|remove-dir|rename-file|reset|rest|round|save|search|seed|seek|select|self|semaphore|send|sequence|series|set-locale|sgn|share|signal|silent|sin|sinh|sleep|slice|source|spawn|sqrt|ssq|starts-with|stats|string|string\\?|struct|sub|sym|symbol\\?|symbols|sync|sys-error|sys-info|t-test|tan|tanh|term|throw|throw-error|time|time-of-day|timer|title-case|trace|trace-highlight|transpose|trim|true\\?|unicode|unify|union|unique|unless|until|upper-case|utf8|utf8len|uuid|wait-pid|when|while|write-buffer|write-char|write-file|xfer-event|xml-error|xml-parse|xml-type-tags|zero\\?)(?=[() ]|$)"
			},
			{
				"name": "support.function.newlisp",
				"match": "(?:^|[() ])(define|define-macro|macro|lambda-macro|lambda|fn)(?=[() ]|$)"
			},
			{
				"name": "storage.modifier.newlisp",
				"match": "(?:^|[() ])(cpymem|delete|get-char|get-float|get-int|get-long|get-string|import|unpack)(?=[() ]|$)"
			},
			{
				"name": "keyword.control.newlisp",
				"match": "(?:^|[( ])(\\+\\+|--|push|pop|set|setq|setf|inc|dec|bind|constant|extend|net-receive|pop-assoc|read|recieve|replace|reverse|rotate|set-ref|set-ref-all|sort|swap|write|write-line)(?=[() ]|$)"
			},
			{
				"name": "constant.language.newlisp",
				"match": "(?:^|[() ])(true|nil)(?=[() ]|$)"
			},
			{
				"name": "comment.quote.symbol.newlisp",
				"match": "(')\\S+"				
			}
		]
		},
		"strings": {
			"name": "string.quoted.double.newlisp",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.newlisp",
					"match": "\\\\."
				}
			]
		},
		"rawstrings": {
			"name": "string.quoted.other.newlisp",
			"begin": "{",
			"end": "}",
			"patterns": [
				{
				}
			]
		},
		"longstrings": {
			"name": "string.quoted.other.newlisp",
			"begin": "\\[text\\]",
			"end": "\\[\\/text\\]",
			"patterns": [
				{
				}
			]
		},
		"numbers": {
			"patterns": [{
				"name": "constant.numeric.newlisp",
				"match": "(?:^|[() ])(([+-]?[0-9]+[L]?)|([0-9]+[.][0-9]+)|([+-]?[0-9]*[.]?[0-9]+[eE]?[-]?[0-9]+)|(0(([bB][01]+)|([+-]?[0-7]+)|([xX][0-9a-fA-F]+))))(?=[() ]|$)"
			}

			]
		},
		"comments": {
			"patterns": [{
				"name": "comment.line.newlisp",
				"match": "((;|#).*$\n?)"
			},{
				"name": "comment.documentation.newlisp",
				"match": "((;;).*$\n?)"
			}
			]
		}
	},
	"scopeName": "source.newlisp"
}